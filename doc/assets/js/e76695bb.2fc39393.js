"use strict";(self.webpackChunkmithril_doc=self.webpackChunkmithril_doc||[]).push([[2863],{28527:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>h,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=i(85893),n=i(3905);const o={title:"Stake Distribution retrieval fixed",authors:[{name:"Mithril Team"}],tags:["stake-distribution","certificate"]},a=void 0,s={permalink:"/doc/dev-blog/2022/09/13/stake-distribution-retrieval",source:"@site/blog/2022-09-13-stake-distribution-retrieval.md",title:"Stake Distribution retrieval fixed",description:"Update the computation now relies on the new cardano-cli query stake-snapshot --all-stake-pools command that retrieves the Stake Distribution all at once and that is way faster. Prior versions of the Cardano node 1.35+ are backward compatible and will keep implementing the algorithm detailed below.",date:"2022-09-13T00:00:00.000Z",formattedDate:"September 13, 2022",tags:[{label:"stake-distribution",permalink:"/doc/dev-blog/tags/stake-distribution"},{label:"certificate",permalink:"/doc/dev-blog/tags/certificate"}],readingTime:1.925,hasTruncateMarker:!1,authors:[{name:"Mithril Team"}],frontMatter:{title:"Stake Distribution retrieval fixed",authors:[{name:"Mithril Team"}],tags:["stake-distribution","certificate"]},unlisted:!1,prevItem:{title:"Mithril internal stores switch to SQLite.",permalink:"/doc/dev-blog/2022/09/14/sqlite-stores"},nextItem:{title:"Signers list computation in Certificates",permalink:"/doc/dev-blog/2022/09/12/certificate-signers-list"}},h={authorsImageUrls:[void 0]},c=[{value:"The way the Mithril nodes retrieve the Stake Distribution is changing",id:"the-way-the-mithril-nodes-retrieve-the-stake-distribution-is-changing",level:3}];function l(e){const t={a:"a",code:"code",h3:"h3",p:"p",strong:"strong",...(0,n.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Update"}),": The Stake Distribution computation is evolving with the release of Cardano node ",(0,r.jsx)(t.code,{children:"8.0.0"}),": the computation now relies on the new ",(0,r.jsx)(t.code,{children:"cardano-cli query stake-snapshot --all-stake-pools"})," command that retrieves the Stake Distribution all at once and that is way faster. Prior versions of the Cardano node ",(0,r.jsx)(t.code,{children:"1.35+"})," are backward compatible and will keep implementing the algorithm detailed below."]}),"\n",(0,r.jsx)(t.h3,{id:"the-way-the-mithril-nodes-retrieve-the-stake-distribution-is-changing",children:"The way the Mithril nodes retrieve the Stake Distribution is changing"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"PR"}),": ",(0,r.jsx)(t.code,{children:"Fix Stake Distribution retrieval"})," ",(0,r.jsx)(t.a,{href:"https://github.com/input-output-hk/mithril/pull/499",children:"#499"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Issue"}),": ",(0,r.jsx)(t.code,{children:"Stake distribution discrepancy"})," ",(0,r.jsx)(t.a,{href:"https://github.com/input-output-hk/mithril/issues/497",children:"#497"})]}),"\n",(0,r.jsxs)(t.p,{children:["We have noticed that the way the Mithril nodes computed the ",(0,r.jsx)(t.code,{children:"Stake Distribution"})," was erroneous: the epoch that was used to make the computation was the ",(0,r.jsx)(t.strong,{children:"current epoch"})," instead of the ",(0,r.jsx)(t.strong,{children:"previous epoch"}),". This has lead to some de-synchronization between the Signers and the hosted GCP Aggregator for a few epochs."]}),"\n",(0,r.jsxs)(t.p,{children:["Indeed, the ",(0,r.jsx)(t.code,{children:"Stake Distribution"})," retrieved from the Cardano node depended on the time at which it was done: the nodes where having differents values that prevented them from being able to work together to produce valid multi-signatures. The problem is related to the epoch that is used (",(0,r.jsx)(t.strong,{children:"current epoch"}),") to make the computation of the ",(0,r.jsx)(t.code,{children:"Stake Distribution"})," when the ",(0,r.jsx)(t.code,{children:"cardano-cli query stake-distribution"})," command is ran, whereas the Mithril protocol needs to work with the ",(0,r.jsx)(t.strong,{children:"previous epoch"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["A workaround is being implemented in this fix that will compute differently the ",(0,r.jsx)(t.code,{children:"Stake Distribution"})," to target the ",(0,r.jsx)(t.strong,{children:"previous epoch"}),". To do so, the Stake value that is now retrieved sequentially for each pool available in the ",(0,r.jsx)(t.code,{children:"cardano-cli query stake-distribution"})," by using the command ",(0,r.jsx)(t.code,{children:"cardano-cli query stake-snapshot --stake-pool-id **pool-id*"}),". This guarantees that the ",(0,r.jsx)(t.code,{children:"Stake Distribution"})," is computed deterministically on all nodes of the Mithril Network."]}),"\n",(0,r.jsxs)(t.p,{children:["We will continue our efforts to enhance the way the ",(0,r.jsx)(t.code,{children:"Stake Distribution"})," is retrieved in the future, and so that it works smoothly on the ",(0,r.jsx)(t.code,{children:"mainnet"})," (where the numbers of pools is bigger ",(0,r.jsx)(t.code,{children:"~3,000"})," vs ",(0,r.jsx)(t.code,{children:"~100"})," on the ",(0,r.jsx)(t.code,{children:"preview"})," network)."]}),"\n",(0,r.jsxs)(t.p,{children:["The SPOs need to recompile their Signer node in order to compute correctly the ",(0,r.jsx)(t.code,{children:"Stake Distributions"})," on their node (as in this ",(0,r.jsx)(t.a,{href:"https://mithril.network/doc/manual/getting-started/run-signer-node",children:"guide"}),").\nIt should then take up to ",(0,r.jsx)(t.code,{children:"2"})," epochs before they are able to successfully register their individual signatures with the Aggregator."]}),"\n",(0,r.jsxs)(t.p,{children:["More information about the ",(0,r.jsx)(t.code,{children:"Certificate Chain"})," and the epochs retrieval requirements is available ",(0,r.jsx)(t.a,{href:"https://mithril.network/doc/mithril/mithril-protocol/certificates",children:"here"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Feel free to reach out to us on the ",(0,r.jsx)(t.a,{href:"https://discord.gg/5kaErDKDRq",children:"Discord channel"})," for questions and/or help."]})]})}function d(e={}){const{wrapper:t}={...(0,n.ah)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},3905:(e,t,i)=>{i.d(t,{ah:()=>c});var r=i(67294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var h=r.createContext({}),c=function(e){var t=r.useContext(h),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,o=e.originalType,h=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(i),p=n,m=u["".concat(h,".").concat(p)]||u[p]||l[p]||o;return i?r.createElement(m,a(a({ref:t},d),{},{components:i})):r.createElement(m,a({ref:t},d))}));d.displayName="MDXCreateElement"}}]);