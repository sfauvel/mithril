<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Mithril. A complete guide. Blog</title>
        <link>https://mithril.network/doc/adr/</link>
        <description>Mithril. A complete guide. Blog</description>
        <lastBuildDate>Wed, 27 Sep 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[6. Errors implementation Standard
]]></title>
            <link>https://mithril.network/doc/adr/6</link>
            <guid>https://mithril.network/doc/adr/6</guid>
            <pubDate>Wed, 27 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 id="status">Status</h2>
<p>Draft</p>
<h2 id="context">Context</h2>
<p>Error handling is difficult with Rust:</p>
<ul>
<li>Many ways of implementing them with different crates (<a href="https://crates.io/crates/thiserror"><code>thiserror</code></a>, <a href="https://crates.io/crates/anyhow"><code>anyhow</code></a>, ...)</li>
<li>No exception like handling of errors</li>
<li>No stack trace or context available by default</li>
<li>Backtrace uniquely when a panic occurs and if <code>RUST_BACKTRACE</code> environment variable is set to <code>1</code> or <code>full</code></li>
</ul>
<p>We think the errors handling should be done in a consistent way in the project.
Thus we have worked on a standardization of their implementation and tried to apply it to the whole repository.
This has enabled us to have a clear vision of the do and don't that we intend to summarize in this ADR.</p>
<h2 id="decision">Decision</h2>
<p><em>Therefore</em></p>
<ul>
<li>We have decided to use <code>thiserror</code> and <code>anyhow</code> crates to implement the errors:<!-- -->
<ul>
<li><a href="https://crates.io/crates/thiserror"><code>thiserror</code></a> is used to create module or domain errors that come from our developments and can be easily identified (as they are strongly typed).</li>
<li><a href="https://crates.io/crates/anyhow"><code>anyhow</code></a> is used to add a context to an error triggered by a sub-system. The context is a convenient way to get 'stack trace' like debug information.</li>
</ul>
</li>
</ul>
<p>Here is a <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=bf667c443696beb90106f6ae627a57b9">Rust playground</a> that summarizes the usage of <code>thiserror</code>:</p>
<pre><code class="language-rust">#[allow(unused_imports)]
use anyhow::{anyhow, Context, Result}; // 1.0.71
use thiserror::Error; // 1.0.43

#[derive(Error, Debug)]
#[error("Codec error: {msg}")]
pub struct CodecError {
    msg: String,
    #[source] // optional if field name is `source`
    source: anyhow::Error,
}

#[derive(Error, Debug)]
pub enum DomainError {
    #[error("Error with codec: {0:?}")]
    CodecWithOnlyDebug(CodecError),

    #[error("Error with codec")]
    CodecWithSource(#[source] CodecError),

    #[error("Error with codec: {0}")]
    CodecWithoutAnything(CodecError),

    #[error("Anyhow error: {0:?}")]
    AnyhowWrapWithOnlyDebug(anyhow::Error),

    #[error("Anyhow error")]
    AnyhowWrapWithSource(#[source] anyhow::Error),

    #[error("Anyhow error: {0}")]
    AnyhowWrapWithoutAnything(anyhow::Error),
}

fn anyhow_result() -&gt; Result&lt;()&gt; {
    "invalid_number"
        .parse::&lt;u64&gt;()
        .map(|_| ())
        .with_context(|| "Reading database failure")
}

fn thiserror_struct() -&gt; Result&lt;(), CodecError&gt; {
    Err(CodecError {
        msg: "My message".to_string(),
        source: anyhow!("Could not decode config"),
    })?;
    Ok(())
}

fn print_error(title: &amp;str, error: anyhow::Error) {
    println!("{title:-^80}");
    println!("{error:?}\n",);
}

fn main() {
    println!("1 - Printing errors from enum variant that contains a error struct\n");
    // Debug the inner error struct: "normal" debug without the anyhow touch
    print_error(
        "DomainError::CodecWithOnlyDebug",
        anyhow!(DomainError::CodecWithOnlyDebug(
            thiserror_struct().unwrap_err()
        )),
    );
    // marking the inner error struct as source: anyhow will be able to make a
    // stacktrace out of this error. Nice !
    print_error(
        "DomainError::CodecWithSource",
        anyhow!(DomainError::CodecWithSource(
            thiserror_struct().unwrap_err()
        )),
    );
    // without debugging the inner error: only show the error text
    print_error(
        "DomainError::CodecWithoutAnything",
        anyhow!(DomainError::CodecWithoutAnything(
            thiserror_struct().unwrap_err()
        )),
    );

    println!("\n2 - Printing errors from enum variant that contains a anyhow error\n");
    // using only debug: the first two errors of the stack will be merged
    print_error(
        "DomainError::AnyhowWrapWithOnlyDebug",
        anyhow!(DomainError::AnyhowWrapWithOnlyDebug(
            anyhow_result().with_context(|| "context").unwrap_err()
        )),
    );
    // using #[source] attribute: each error of the stack will have a line
    print_error(
        "DomainError::AnyhowWrapWithSource",
        anyhow!(DomainError::AnyhowWrapWithSource(
            anyhow_result().with_context(|| "context").unwrap_err()
        )),
    );
    // without debug nor source: only the uppermost error is print
    print_error(
        "DomainError::AnyhowWrapWithoutAnything",
        anyhow!(DomainError::AnyhowWrapWithoutAnything(
            anyhow_result().with_context(|| "context").unwrap_err()
        )),
    );
}

</code></pre>
<p>Which will output errors this way:</p>
<pre><code>1 - Printing errors from enum variant that contains a error struct

------------------------DomainError::CodecWithOnlyDebug-------------------------
Error with codec: CodecError { msg: "My message", source: Could not decode config }

--------------------------DomainError::CodecWithSource--------------------------
Error with codec

Caused by:
    0: Codec error: My message
    1: Could not decode config

-----------------------DomainError::CodecWithoutAnything------------------------
Error with codec: Codec error: My message


2 - Printing errors from enum variant that contains a anyhow error

----------------------DomainError::AnyhowWrapWithOnlyDebug----------------------
Anyhow error: context

Caused by:
    0: Reading database failure
    1: invalid digit found in string

-----------------------DomainError::AnyhowWrapWithSource------------------------
Anyhow error

Caused by:
    0: context
    1: Reading database failure
    2: invalid digit found in string

---------------------DomainError::AnyhowWrapWithoutAnything---------------------
Anyhow error: context
</code></pre>
<p>Here is a <a href="https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=90f962ab001d2ea0321fc5da0d4ec0f1">Rust playground</a> that summarizes the usage of the <code>context</code> feature form <code>anyhow</code>:</p>
<pre><code class="language-rust">#[allow(unused_imports)]
use anyhow::{anyhow, Context, Result}; // 1.0.71

fn read_db() -&gt; Result&lt;()&gt; {
    "invalid_number"
        .parse::&lt;u64&gt;()
        .map(|_| ())
        .with_context(|| "Reading database failure")
}

fn do_work() -&gt; Result&lt;()&gt; {
    read_db().with_context(|| "Important work failed while reading database")
}

fn do_service_work() -&gt; Result&lt;()&gt; {
    do_work().with_context(|| "Service could not do the important work")
}

fn main() {
    let error = do_service_work().unwrap_err();

    println!("Error string:\n {error}\n\n");
    println!("Error debug:\n {error:?}\n\n");
    println!("Error pretty:\n {error:#?}\n\n");
}

</code></pre>
<p>Which will output errors this way:</p>
<pre><code>Error string:
 Service could not do the important work


Error debug:
 Service could not do the important work

Caused by:
    0: Important work failed while reading database
    1: Reading database failure
    2: invalid digit found in string


Error pretty:
 Error {
    context: "Service could not do the important work",
    source: Error {
        context: "Important work failed while reading database",
        source: Error {
            context: "Reading database failure",
            source: ParseIntError {
                kind: InvalidDigit,
            },
        },
    },
}
</code></pre>
<h2 id="consequences">Consequences</h2>
<ul>
<li>We have defined the following aliases that should be used by default:<!-- -->
<ul>
<li><code>StdResult</code>: the default result that should be returned by a function (unless a more specific type is required).</li>
<li><code>StdError</code>: the default error that should be used (unless a more specific type is required).</li>
</ul>
</li>
</ul>
<pre><code class="language-rust">/* Code extracted from mithril-common::lib.rs */
/// Generic error type
pub type StdError = anyhow::Error;

/// Generic result type
pub type StdResult&lt;T&gt; = anyhow::Result&lt;T, StdError&gt;;
</code></pre>
<ul>
<li>
<p>The function that returns an error from a sub-system should systematically add a context to the error with the <code>with_context</code> method, in order to provide clear stack traces and ease debugging.</p>
</li>
<li>
<p>When printing an <code>StdError</code> we should use the debug format without the pretty modifier, ie:</p>
</li>
</ul>
<pre><code class="language-rust">println!("Error debug:\n {error:?}\n\n");
</code></pre>
<ul>
<li>When wrapping an error in a <code>thiserror</code> enum variant we should use the <code>source</code> attribute that will provide a clearer stack trace:</li>
</ul>
<pre><code class="language-rust">/// Correct usage with `source` attribute
#[derive(Error, Debug)]
pub enum DomainError {
    #[error("Anyhow error")]
    AnyhowWrapWithSource(#[source] StdError),
}
</code></pre>
<pre><code class="language-rust">/// Incorrect usage without `source` attribute
#[derive(Error, Debug)]
pub enum DomainError {
    #[error("Anyhow error: {0}")]
    AnyhowWrapWithoutAnything(StdError),
}
</code></pre>
<ul>
<li>Here are some tips on how to discriminate between creating a new error using <code>thiserror</code> or using an <code>StdResult</code>:<!-- -->
<ul>
<li>If you raise an anyhow error which only contains a string this means that you are creating a new error that doesn't come from a sub-system. In that case you should create a type using <code>thiserror</code> intead, ie:</li>
</ul>
</li>
</ul>
<pre><code class="language-rust">// Avoid
return Err(anyhow!("my new error"));

// Prefer
#[derive(Debug,Error)]
pub enum MyError {
  MyNewError
}
return Err(MyError::MyNewError);
</code></pre>
<ul>
<li>(<em>Still undecided</em>) You should avoid wrapping a <code>StdError</code> in a <code>thiserror</code> type. This <strong>breaks</strong> the stack trace and makes it really difficult to retrieve the innermost errors using <code>downcast_ref</code>. When the <code>thiserror</code> type is itself wrapped in a <code>StdError</code> afterward, you would have to <code>downcast_ref</code> twice: first to get the <code>thiserror</code> type and then to get the innermost error.
This should be restricted to the topmost errors of our system (ie the state machine errors).</li>
</ul>]]></content:encoded>
            <category>Draft</category>
        </item>
        <item>
            <title><![CDATA[5. Use rfc3339 for date formatting 
]]></title>
            <link>https://mithril.network/doc/adr/5</link>
            <guid>https://mithril.network/doc/adr/5</guid>
            <pubDate>Wed, 21 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 id="status">Status</h2>
<p>Accepted</p>
<h2 id="context">Context</h2>
<p>Previously, on the Mithril project we did not have a preferred format for the dates in our applications, leading to
multiple formats being used.</p>
<p>For example when querying a certificate from an aggregator, the <code>initiated_at</code> field did not specify the timezone,
timezone that could be found in the <code>sealed_at</code> field:</p>
<pre><code class="language-json">{
  "initiated_at": "2023-05-26T00:02:23",
  "sealed_at": "2023-05-26T00:03:23.998753492Z"
}
</code></pre>
<p>Same problem in our databases where a date could be stored without timezone and milliseconds (ie: <code>2023-06-13 16:35:28</code>)
in one table column and with them in another (ie: <code>2023-06-13T16:35:28.143292875Z</code>).</p>
<p>The <a href="https://datatracker.ietf.org/doc/html/rfc3339">RFC 3339</a> is a widely used, easily readable, mostly numeric (no
translation is needed to parse the day or the month), format. Also, it always includes the timezone meaning that our
client can convert such date to their local time if needed.</p>
<h2 id="decision">Decision</h2>
<p><em>Therefore</em></p>
<ul>
<li>We commit to use <strong>RFC 3339</strong> compatible date and time whenever we need to store or show a date and time.</li>
</ul>
<h2 id="consequences">Consequences</h2>
<ul>
<li>All dates and time must use a dedicated type in the application, ie: the <code>DateTime&lt;Utc&gt;</code> type from
<a href="https://crates.io/crates/chrono">chrono</a> crate.<!-- -->
<ul>
<li>This means that dates must <strong>never</strong> be stored in our types using Strings.</li>
</ul>
</li>
<li>Internally, we will always use the <strong>UTC timezone</strong>, to avoid useless conversions between timezones.</li>
<li>Users or scripts querying dates from our applications or from our databases will be able to parse all of them using
the same format.</li>
</ul>]]></content:encoded>
            <category>Accepted</category>
        </item>
        <item>
            <title><![CDATA[4. Mithril Network Upgrade Strategy
]]></title>
            <link>https://mithril.network/doc/adr/4</link>
            <guid>https://mithril.network/doc/adr/4</guid>
            <pubDate>Thu, 05 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 id="status">Status</h2>
<p><strong>Draft</strong></p>
<h2 id="context">Context</h2>
<p>When we will run Mithril on mainnet there will be thousands of signers running. Upgrading the version of the nodes has an impact as different versions of API, messages, signature may lead to loss of a significant part of the signers population over one epoch or more. In any case we must prevent a gap in the certificate chain while upgrading critical parts.</p>
<p>We need to be able to keep enough of signer nodes and the aggregator able to work together in order to produce at least one certificate per epoch.</p>
<p>Examples of such changes:</p>
<ul>
<li>change in the message structure</li>
<li>change in the cryptographic algorithm</li>
<li>change in communication channels</li>
</ul>
<h2 id="decision">Decision</h2>
<p>In order to synchronize all nodes behavior transition, the Release Team will define Eras that start at a given Cardano Epoch and lasts until the next Era begins. When nodes detect an Era change, they switch from old to new behavior hence all transitioning at almost the same time.</p>
<h2 id="consequences">Consequences</h2>
<h3 id="release-team">Release Team</h3>
<p>The release team is the team responsible of releasing new versions of Mithril software. The <strong>Release Team</strong> will be responsible to set the Epoch at which <strong>Eras</strong> change using an <strong>Era Activation Marker</strong>. In order to be able to determine when the new Era will begin, the Release Team has to know what is the share of the total Mithril stake that can run the new behavior. Signer node software versions has to be <strong>monitored</strong>.</p>
<h3 id="version-monitoring">Version monitoring</h3>
<p>The Release Team must be aware of the software version run by the Signer nodes and their associated stake. The version is going to be added to all HTTP headers in inter-node communication. In a first step, the Aggregator nodes will record this information, and provide the mapping of stakes to Signer nodes.</p>
<p>This configuration works in the case where there is a centralized Aggregator Node (as it is today). In the future, there may be several Aggregator nodes working in a decentralized manner. This would mean having a separate monitoring service, and also monitor the aggregators node versions.</p>
<h3 id="era-activation-marker">Era Activation Marker</h3>
<p>An Era Activation Marker is an information shared among all the nodes. For every upgrade, there are two phases:</p>
<ul>
<li>a first marker is set on the blockchain that just indicates a new Era will start soon and softwares shall be updated.</li>
<li>a second marker is set that specifies the Epoch when they must switch from old to new behavior.</li>
</ul>
<p>Every Era Activation Marker will be a transaction in the Cardano blockchain. This implies the nodes must be able to read transactions of the blockchain. Era Activation Markers can be of the same type, the first maker does not hold any Epoch information whereas the second does.</p>
<p>Node will check the blockchain for Markers at startup and for every new Epoch. When a node detects a Marker, it will warn the user if it does not support the incoming Era that he must upgrade his node. If the node detects it does not support the current Era, it will stop working with an explicit error message. To ease that operation, Era Activation Marker will be made sortable.</p>
<h3 id="behavior-switch">Behavior Switch</h3>
<p>The nodes must be able to switch from one behavior to another when the Era Epoch is reached. This means the software must embed both behaviors. The switch is developed as a one time operation, there is no rollback mechanism available. Once the Epoch is transitioned and the switch has occurred, a new software release can remove the old behavior from the codebase.</p>
<mermaid value="sequenceDiagram
    actor Release Team
    actor User
    Release Team--xChain: New Era coming soon.
    Note over Chain: new Epoch
    Old Node->>Chain: What is the latest marker?
    Chain->>Old Node: Era change soon
    New Node->>Chain: What is the last marker?
    Chain->>New Node: Era change soon
    Note over New Node: upgrade
    Loop every Epoch
        Note over Chain: new Epoch
        Old Node->>Chain: What is the last marker?
        Chain->>Old Node: Era change soon
        Old Node->>User: ⚠️ new Era incoming, please update node
        New Node->>Chain: What is the last marker?
        Chain->>New Node: Era change soon
    end
    Release Team--xChain: New Era start at Epoch XX.
    Loop every Epoch
        Note over Chain: new Epoch
        Old Node->>Chain: What is the last marker?
        Chain->>Old Node: Era change at Epoch XX
        Old Node->>User: ⚠️ new Era incoming, please update node
        New Node->>Chain: What is the last marker?
        Chain->>New Node: Era change at Epoch XX
    end
    Note over Chain: Epoch XX
    Note over Old Node,New Node: new Era
    New Node->>Chain: What is the last marker?
    Chain->>New Node: Era change at Epoch XX
    Note over New Node: switch behavior
    Old Node->>Chain: What is the last marker?
    Chain->>Old Node: Era change at Epoch XX
    Old Node->>User: 💀 unsupported Era, quit."></mermaid>]]></content:encoded>
            <category>Draft</category>
        </item>
        <item>
            <title><![CDATA[3. Release process and versioning
]]></title>
            <link>https://mithril.network/doc/adr/3</link>
            <guid>https://mithril.network/doc/adr/3</guid>
            <pubDate>Fri, 21 Oct 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 id="status">Status</h2>
<p><strong>draft</strong></p>
<h2 id="context">Context</h2>
<p>In order to deliver regularly the software to our users, we should implement a release process based on a predictable versioning scheme.</p>
<h3 id="versioning">Versioning</h3>
<p>A Release Version determines a distribution of determined node versions and underlying libraries.</p>
<ul>
<li>Our softwares must be able to interact seamlessly with other Mithril software.</li>
<li>Our softwares must be able to be hosted on crates.io.</li>
<li>Our softwares must clearly indicate compatibility with other Mithril components to end users.</li>
</ul>
<h3 id="release-process">Release process</h3>
<p>A Release is a software package that is built once and then promoted from the testing environment to the production environment. It can be signed.</p>
<ul>
<li>Keep it simple.</li>
<li>Automated as much as possible: all points not requiring human decision shall be automated.</li>
<li>Minimize the mean time to release.</li>
</ul>
<h2 id="decision">Decision</h2>
<p>There are 3 versioned layers in the Mithril stack:</p>
<ul>
<li>HTTP API protocol to ensure compatibility in the communication between nodes (use Semver).</li>
<li>Crate version: each node &amp; library has its own version (use Semver). The commit digest is automatically added to the version by the CI pipeline.</li>
<li>Release Version: the distribution version (use version scheme <strong>YYWW.patch</strong> | <strong>YYWW.patch-name</strong>). The VERSION file is computed by the pipeline from the tag release.</li>
</ul>
<p>The documentation is tied to a Release Version.</p>
<h3 id="release-process-1">Release Process</h3>
<p>Starting just after a new release has been made:</p>
<ol>
<li>Develop on a dedicated development branch.</li>
<li>When merging PR on main: update the <code>Cargo.toml</code> files with version of the updated nodes.</li>
<li>Once merged, the CI creates an <code>unstable</code> tag &amp; release which is deployed on testing environment.</li>
<li>Push a tag using the distribution version format on this commit with a <code>-prerelease</code> suffix.</li>
<li>The CI gets the built artifacts associated with this commit and generates a named pre-release which is deployed on <code>pre-release</code> for testing.</li>
<li>Push a tag using the distribution version format on this commit without the <code>-prerelease</code> suffix.</li>
<li>The CI gets the built artifacts associated with this commit and generates a named release which is deployed on <code>pre-release</code> for testing.</li>
<li>In the release GitHub interface, edit the newly generated release, uncheck the <code>This is a pre-release</code> checkbox.</li>
<li>The CI gets the built artifacts associated with this commit and generates a named release which is deployed on <code>release</code>.</li>
<li>Create a commit:<!-- -->
<ol>
<li>to promote the documentation website from future to current.</li>
<li>to update the SQL schema with alterations from the previous release.</li>
</ol>
</li>
</ol>
<p><a target="_blank" href="https://mithril.network/doc/assets/files/release_process-a9ce55af510cd542b71e68a485251004.jpg"><img alt="Release Process" src="https://mithril.network/doc/assets/images/release_process-a9ce55af510cd542b71e68a485251004.jpg" width="1220" height="819"></a></p>
<h3 id="hotfix-release">Hotfix Release</h3>
<p>​
In case of a blocking issue (following a distribution release) on the release environment that requires an immediate fix:
​</p>
<ol>
<li>Create a branch on the last release tag with the following scheme: <code>hotfix/{last_distribution-version}.{last_patch_number + 1}</code>.</li>
<li>Development of the fix is done on this branch.</li>
<li>After each commit on this branch, the CI creates an <code>unstable</code> tag &amp; release which is not deployed on testing environment (testing must be done on an ad hoc environment manually created).</li>
<li>Push a tag on the branch last commit using the branch distribution version with a <code>-hotfix</code> suffix.</li>
<li>The CI gets the built artifacts associated with this commit and generates a named pre-release which is deployed on <code>pre-release</code> for testing.</li>
<li>In the release GitHub interface, edit the newly generated release, uncheck the <code>This is a pre-release</code> checkbox.</li>
<li>The CI gets the built artifacts associated with this commit and generates a named release which is deployed on <code>release</code>.</li>
<li>Merge the hotfix branch on main branch (and adapt the changes if they are not compatible with the current main branch).</li>
</ol>]]></content:encoded>
            <category>Draft</category>
        </item>
        <item>
            <title><![CDATA[2. Use simple structured logging
]]></title>
            <link>https://mithril.network/doc/adr/2</link>
            <guid>https://mithril.network/doc/adr/2</guid>
            <pubDate>Sun, 24 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 id="status">Status</h2>
<p><strong>Draft</strong></p>
<h2 id="context">Context</h2>
<ul>
<li>Logs are a critical tool for operating any software system, enabling <a href="https://cloud.google.com/architecture/devops/devops-measurement-monitoring-and-observability">observability</a> of the system.</li>
<li>Following <a href="https://12factor.net/logs">12 Factor Apps</a> principles, providing the needed components and tools to be able to configure logging and monitoring should not be the responsibility of the software components</li>
</ul>
<h2 id="decision">Decision</h2>
<p><em>Therefore</em></p>
<ul>
<li>Each component of the system use <a href="https://www.sumologic.com/glossary/structured-logging/">Structured logging</a> using documented and standardised JSON format for its logs</li>
<li>Logs are always emitted to <code>stdout</code> of the process the component is part of</li>
</ul>
<h2 id="consequences">Consequences</h2>
<ul>
<li>The schema of the logged items should be properly documented in a JSON schema</li>
<li>It is the responsibility of the node operator to consume the logs and process them</li>
<li>We use existing libraries to provide needed log infrastructure, like <a href="https://zsiciarz.github.io/24daysofrust/book/vol2/day4.html">slog</a> for Rust</li>
</ul>]]></content:encoded>
            <category>Draft</category>
        </item>
        <item>
            <title><![CDATA[1. Record Architecture Decisions
]]></title>
            <link>https://mithril.network/doc/adr/1</link>
            <guid>https://mithril.network/doc/adr/1</guid>
            <pubDate>Thu, 21 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Status]]></description>
            <content:encoded><![CDATA[<h2 id="status">Status</h2>
<p>Accepted</p>
<h2 id="context">Context</h2>
<p>We are in search for a means to describe our technical architecture.</p>
<p>We are a small team working in a very lean and agile way (XP), so we naturally
prefer also light-weight documentation methods which also accomodate change
easily.</p>
<h2 id="decision">Decision</h2>
<ul>
<li>We will use <em>Architecture Decision Records</em>, as described by Michael Nygard in
this
<a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions">article</a>.</li>
<li>We will follow the convention of storing those ADRs as Markdown formatted
documents stored under <code>docs/adr</code> directory, as exemplified in Nat Pryce's
<a href="https://github.com/npryce/adr-tools">adr-tools</a>. This does not imply we will
be using <code>adr-tools</code> itself.</li>
</ul>
<h2 id="consequences">Consequences</h2>
<p>See Michael Nygard's article, linked above.</p>]]></content:encoded>
            <category>Accepted</category>
        </item>
    </channel>
</rss>